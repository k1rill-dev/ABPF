# -*- coding: utf-8 -*-
from aiogram import types
from states.state import StateBot
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from keyboards.inline.analiz_port import analiz
from requests import get, post
from keyboards.default.menu import main_menu1
from loader import dp
import datetime as dt
import csv


@dp.message_handler(state=StateBot.Money)
async def bot_short(message: types.Message, state: FSMContext):
    try:
        price = int(message.text)
        await state.update_data(
            {"money": price}
        )
        data = await state.get_data()

        await message.answer('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω—ã, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–±—Ä–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏  –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É',
                             reply_markup=analiz)
    except:
        await state.finish()
        await message.answer(f'–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã \n\n'
                             f'–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "/help" ‚úç ')


@dp.callback_query_handler(text_contains="portfel", state=StateBot.Money)
async def buying_pear(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    data = await state.get_data()
    if len(data) == 3:
        data['tg_id'] = None
    print(data)

    json_resp = post('http://localhost:5000/api/v2/briefcase/', json={
        'date': dt.datetime.now().strftime("%d-%m-%Y"),
        'length_invest_horizon': data['invest_gorizont'],
        'budget': data['money'],
        'tg_id': data['tg_id'],
        'shorts': data['short']
    }).json()
    list_bonds = []
    for item in json_resp['bonds']:
        list_bonds.append(
            f'üìç –≠–º–∏—Ç–µ–Ω—Ç: {item["name"]}\n\n    üí∞ –ö—É–ø–æ–Ω–Ω—ã–π –¥–æ—Ö–æ–¥: {item["coupon_yield"]}\n    üìå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–ª–∏–≥–∞—Ü–∏–π: {item["count"]}\n    ‚öñÔ∏è –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂–∏ {item["price"]}\n    ‚è± –ì–æ–¥ –ø–æ–≥–∞—à–µ–Ω–∏—è: {item["repayment_year"]}\n    ‚ôª –¢—Ä–∞—Ç—ã –∑–∞ –≥–æ–¥: {item["spent_for_years"]}\n\n')

    price = list()
    price_vol = list()
    stoks = json_resp["stoks"]
    for i, k in stoks.get('sharp').get('stoks_and_count').items():
        s = f'\n{i} - {k}'
        price.append(s)

    for v, k in stoks.get('volatility').get('stoks_and_count').items():
        s = f'\n{v} - {k}'
        price_vol.append(s)

    msg = f"üìà –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É –∫–æ—ç—Ñ–∏—Ü–∏–µ–Ω—Ç—É –®–∞—Ä–ø–∞:" + \
          f'\n{"".join(price)}\n' + \
          f"\nüíµ –û—Å—Ç–∞—Ç–æ–∫ —Å—Ä–µ–¥—Å—Ç–≤(–ø–æ –®–∞—Ä–ø—É)  - {stoks.get('sharp').get('balance')}\n" + \
          f'\nüìå –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏:' + \
          f'\n{"".join(price_vol)}\n' + \
          f'\nüíµ –û—Å—Ç–∞—Ç–æ–∫ —Å—Ä–µ–¥—Å—Ç–≤(–í–æ–ª–∞–Ω—Ç–∏–ª—å–Ω–æ—Å—Ç—å) - {stoks.get("volatility").get("balance")}\n' + \
          f'\nüìÖ –î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π: {json_resp["time"]}\n' + \
          f'\nüí∞ –ì–æ–¥–æ–≤–æ–π –¥–æ—Ö–æ–¥: {json_resp["yield"]}'

    await call.message.answer('üíº –°–æ—Å—Ç–∞–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è\n', reply_markup=ReplyKeyboardRemove())
    await call.message.answer('üìà –î–∞–Ω–Ω—ã–µ –æ–± –∞–∫—Ü–∏—è—Ö\n')
    await call.message.answer(msg)
    await call.message.answer('üìú –î–∞–Ω–Ω—ã–µ –æ–± –æ–±–ª–∏–≥–∞—Ü–∏—è—Ö\n', reply_markup=main_menu1)
    await call.message.answer(''.join(list_bonds))


@dp.callback_query_handler(text_contains="csv", state=StateBot.Money)
async def buying_pear(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    data = await state.get_data()
    if len(data) == 3:
        data['tg_id'] = None
    print(data)

    json_resp = post('http://localhost:5000/api/v2/briefcase/', json={
        'date': dt.datetime.now().strftime("%d-%m-%Y"),
        'length_invest_horizon': data['invest_gorizont'],
        'budget': data['money'],
        'tg_id': data['tg_id'],
        'shorts': data['short']
    }).json()

    path_bond = f"portfolio_with_bonds_{dt.datetime.now().strftime('%d-%m-%Y')}.csv"
    with open(path_bond, 'w') as f:
        wr = csv.DictWriter(f, ["count", "coupon_yield", "name", "price",
                                "repayment_year", "spent_for_years"])
        wr.writeheader()
        wr.writerows(json_resp["bonds"])


    sharp_keys = json_resp['stoks']['sharp']['stoks_and_count'].keys()
    volatility_keys = json_resp['stoks']['volatility']['stoks_and_count'].keys()
    path_stoks = f"portfolio_with_stoks_{dt.datetime.now().strftime('%d-%m-%Y')}.csv"
    with open(path_stoks, 'w') as f:
        spamwriter = csv.writer(f, delimiter=',', quoting=csv.QUOTE_MINIMAL)
        spamwriter.writerow(["sharp_balance", *sharp_keys,
                             "volatility_balance", *volatility_keys])
        spamwriter.writerow([json_resp['stoks']['sharp']["balance"],
                             *json_resp['stoks']['sharp']['stoks_and_count'].values(),
                             json_resp['stoks']['volatility']["balance"],
                             *json_resp['stoks']['volatility']['stoks_and_count'].values()])
    await call.message.answer_document(document=types.InputFile(path_bond), reply_markup=main_menu1)
    await call.message.answer_document(document=types.InputFile(path_stoks), reply_markup=main_menu1)


# await state.finish()
